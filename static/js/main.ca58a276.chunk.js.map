{"version":3,"sources":["components/Message.js","components/MessageList.js","components/Room.js","components/RoomList.js","components/NewRoomForm.js","components/SendMessageForm.js","components/OnlineIndicator.js","components/Contact.js","components/ContactList.js","components/HamburgIcon/HamburgIcon.js","components/RoomHeader.js","components/Main.js","config/config.js","App.js","serviceWorker.js","index.js"],"names":["Message","senderId","text","className","parts","payload","content","MessageList","props","messageListRef","React","createRef","prevProps","prevState","messageListNode","this","current","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","snapshot","messages","currentRoomId","messageFullArea","roomMessages","map","message","index","key","id","fullArea","ref","Component","Room","roomName","roomId","subscribeToRoom","active","onClick","RoomList","joinedRooms","joinableRooms","joinedUserRooms","sort","a","b","name","toUpperCase","room","joinableUserRooms","length","NewRoomForm","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","creatRoom","onSubmit","type","placeholder","onChange","SendMessageForm","sendMessage","fixed","disabled","OnlineIndicator","userPresence","presence","Contact","currentUser","you","presenceStore","console","log","src","alt","ContactList","roomUsers","contactsList","contact","HamburgIcon","aria-label","handleHamburgerClick","xmlns","viewBox","d","RoomHeader","currentRoomName","Main","sendMessageToChatkit","sendSimpleMessage","catch","err","isTypingIn","then","subscribeToRoomMultipart","hooks","onMessage","onPresenceChanged","user","onUserStartedTyping","onUserStoppedTyping","messageLimit","users","getRooms","getJoinableRooms","rooms","fetchRoomMessages","fetchMultipartMessages","direction","createRoom","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","startMessage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca58a276.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Message = ({ senderId, text }) => {\r\n  return (\r\n    <div className=\"message\">\r\n      <div className=\"message-username\">{senderId}</div>\r\n      <div className=\"message-text\">{text.parts[0].payload.content}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { Component } from 'react';\r\nimport Message from './Message';\r\n\r\nclass MessageList extends Component {\r\n  // create ref for <MessageList /> to use for auto scroll\r\n  constructor(props) {\r\n    super(props);\r\n    this.messageListRef = React.createRef();\r\n  }\r\n\r\n  // check where user in the scroll\r\n  // use getSnapshotBeforeUpdate() instead of using componentWillUpdate\r\n  getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    const messageListNode = this.messageListRef.current;\r\n    // scrollTop height of scrolled part from top\r\n    // clientHeight height of appeared part\r\n    // scrollHeight height of <MessageList />\r\n    // scroll to bottom when we are near it\r\n    this.shouldScrollToBottom =\r\n      messageListNode.scrollTop + messageListNode.clientHeight + 100 >=\r\n      messageListNode.scrollHeight;\r\n    return this.shouldScrollToBottom;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    // outoscroll to last message\r\n    // snapshot is the value returned from getSnapshotBeforeUpdate\r\n    if (snapshot) {\r\n      const messageListNode = this.messageListRef.current;\r\n      messageListNode.scrollTop = messageListNode.scrollHeight;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { messages, currentRoomId, messageFullArea } = this.props;\r\n\r\n    const roomMessages = messages.map((message, index) => {\r\n      return <Message senderId={message.senderId} text={message} key={message.id} />;\r\n    });\r\n\r\n    const fullArea = messageFullArea ? 'full-area' : '';\r\n\r\n    if (!currentRoomId) {\r\n      return (\r\n        <div className=\"message-list\" ref={this.messageListRef}>\r\n          <div className=\"start-message\">Click a room to start chatting</div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={`message-list  ${fullArea}`} ref={this.messageListRef}>\r\n        {roomMessages}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageList;\r\n","import React from 'react';\r\n\r\nconst Room = ({ roomName, roomId, subscribeToRoom, currentRoomId }) => {\r\n  const active = currentRoomId === roomId ? 'active' : '';\r\n  return (\r\n    <li className={`room ${active}`}>\r\n      {/**  use arrow function in onClick when passing an arugment*/\r\n      /**  handle user click on room to subscribe*/\r\n      /** pass roomId as an action to <Main /> \r\n      use <button> instead of <a>\r\n      https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md*/}\r\n      <button onClick={() => subscribeToRoom(roomId, roomName)}># {roomName}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n","import React, { Component } from 'react';\r\nimport Room from './Room';\r\n\r\nclass RoomList extends Component {\r\n  render() {\r\n    const { joinedRooms, joinableRooms, subscribeToRoom, currentRoomId } = this.props;\r\n\r\n    const joinedUserRooms = joinedRooms\r\n      .sort((a, b) => {\r\n        return a.name.toUpperCase() < b.name.toUpperCase() ? -1 : 1; // toUpperCase() to ignore upper and lowercase\r\n      })\r\n      .map(room => {\r\n        return (\r\n          <Room\r\n            roomName={room.name}\r\n            roomId={room.id}\r\n            key={room.id}\r\n            subscribeToRoom={subscribeToRoom}\r\n            currentRoomId={currentRoomId}\r\n          />\r\n        );\r\n      });\r\n\r\n    const joinableUserRooms = joinableRooms\r\n      .sort((a, b) => {\r\n        return a.name.toUpperCase() < b.name.toUpperCase() ? -1 : 1; // toUpperCase() to ignore upper and lowercase\r\n      })\r\n      .map(room => {\r\n        return (\r\n          <Room\r\n            roomName={room.name}\r\n            roomId={room.id}\r\n            key={room.id}\r\n            subscribeToRoom={subscribeToRoom}\r\n            currentRoomId={currentRoomId}\r\n          />\r\n        );\r\n      });\r\n\r\n    return (\r\n      <div className=\"rooms-list\">\r\n        <h3>Your Rooms</h3>\r\n        {joinedUserRooms.length === 0 ? <p>Click to join rooms</p> : <ul>{joinedUserRooms}</ul>}\r\n\r\n        <h3>Rooms to join</h3>\r\n        {joinableUserRooms.length === 0 ? <p>No new rooms yet</p> : <ul>{joinableUserRooms}</ul>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoomList;\r\n","import React, { Component } from 'react';\r\n\r\nclass NewRoomForm extends Component {\r\n  state = {\r\n    roomName: ''\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ roomName: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.creatRoom(this.state.roomName);\r\n    this.setState({ roomName: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"new-room-form\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            value={this.state.roomName}\r\n            type=\"text\"\r\n            placeholder=\"Create a room\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <button>+</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewRoomForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass SendMessageForm extends Component {\r\n  state = {\r\n    message: ''\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ message: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    const { sendMessage } = this.props;\r\n    e.preventDefault();\r\n    // send message up as an action to <Main />\r\n    sendMessage(this.state.message);\r\n    this.setState({ message: '' }); // to improve UX\r\n  };\r\n\r\n  render() {\r\n    const { currentRoomId, messageFullArea } = this.props;\r\n    const fixed = messageFullArea ? 'fixed' : '';\r\n\r\n    return (\r\n      <div className={`send-message-form  ${fixed}`}>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            disabled={currentRoomId} // if currentRoomId is null disable input\r\n            type=\"text\"\r\n            value={this.state.message}\r\n            onChange={this.handleChange}\r\n            placeholder=\"Type message and hit enter\"\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SendMessageForm;\r\n","import React from 'react';\r\n\r\nconst OnlineIndicator = ({ presence }) => {\r\n  const userPresence = presence === 'online' ? 'online' : 'offline';\r\n  return <div className={`indicator ${userPresence}`} />;\r\n};\r\n\r\nexport default OnlineIndicator;\r\n","import React from 'react';\r\nimport OnlineIndicator from './OnlineIndicator';\r\n\r\nconst Contact = ({ presence, name, currentUser }) => {\r\n  const you = currentUser.presenceStore[currentUser.id] === presence ? '(you)' : '';\r\n  console.log(currentUser.id, currentUser.presenceStore[currentUser.id]);\r\n  return (\r\n    <li className=\"contact\">\r\n      <OnlineIndicator presence={presence} />\r\n      {/* add avatar for roomUsers using https://ui-avatars.com/ API */}\r\n      <img\r\n        className=\"avatar\"\r\n        src={`https://ui-avatars.com/api/?name=${name}&size=30&rounded=true`}\r\n        alt=\"avatar\"\r\n      />\r\n      {`${name} ${you}`}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\n\r\nclass ContactList extends Component {\r\n  render() {\r\n    const { roomUsers, currentUser } = this.props;\r\n    const contactsList = roomUsers.map(contact => {\r\n      return (\r\n        <Contact\r\n          name={contact.name}\r\n          key={contact.id}\r\n          presence={contact.presenceStore[`${contact.id}`]}\r\n          currentUser={currentUser}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"contacts-list\">\r\n        <h3>Your Contacts</h3>\r\n        <ul>{contactsList}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport './HamburgIcon.css';\r\n\r\nconst HamburgIcon = props => {\r\n  return (\r\n    <button\r\n      aria-label=\"menu\"\r\n      id=\"menu\"\r\n      className=\"header_menu\"\r\n      onClick={props.handleHamburgerClick}\r\n    >\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M2 6h20v3H2zm0 5h20v3H2zm0 5h20v3H2z\" />\r\n      </svg>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default HamburgIcon;\r\n// onClick={props.handleHamburgerClick}\r\n","import React from 'react';\r\nimport HamburgIcon from './HamburgIcon/HamburgIcon.js';\r\n\r\nconst RoomHeader = ({ currentRoomName, currentRoomId, handleHamburgerClick, messageFullArea }) => {\r\n  const fixed = messageFullArea ? 'fixed' : '';\r\n  if (currentRoomId) {\r\n    return (\r\n      <header className={`room-header ${fixed}`}>\r\n        <HamburgIcon handleHamburgerClick={handleHamburgerClick} />\r\n        <h1>{currentRoomName}</h1>\r\n      </header>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nexport default RoomHeader;\r\n","import React, { Component } from 'react';\r\nimport MessageList from './MessageList';\r\nimport RoomList from './RoomList';\r\nimport NewRoomForm from './NewRoomForm';\r\nimport SendMessageForm from './SendMessageForm';\r\nimport { tokenUrl, chatkitInstanceLocator } from '../config/config';\r\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\r\nimport ContactList from './ContactList';\r\nimport RoomHeader from './RoomHeader.js';\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    messages: [],\r\n    joinableRooms: [],\r\n    joinedRooms: [],\r\n    currentRoomId: null,\r\n    roomUsers: [],\r\n    currentRoomName: null,\r\n    messageFullArea: false\r\n  };\r\n\r\n  // <MessagesList /> take full width\r\n  handleHamburgerClick = () => {\r\n    this.setState(prevState => {\r\n      return { messageFullArea: !prevState.messageFullArea };\r\n    });\r\n  };\r\n\r\n  sendMessageToChatkit = message => {\r\n    this.currentUser\r\n      .sendSimpleMessage({\r\n        roomId: this.state.currentRoomId,\r\n        text: message\r\n      })\r\n      .catch(err => {\r\n        console.log(`Error: ${err}`);\r\n      });\r\n\r\n    this.currentUser\r\n      .isTypingIn({ roomId: this.state.currentRoomId })\r\n      .then(() => {\r\n        console.log('Success!', this.currentUser.name);\r\n      })\r\n      .catch(err => {\r\n        console.log(`Error sending typing indicator: ${err}`);\r\n      });\r\n  };\r\n\r\n  subscribeToRoom = (roomId, roomName) => {\r\n    // console.log(roomId);\r\n    this.setState({ currentRoomId: roomId, messages: [], currentRoomName: roomName }); // UX clean screen every time user click an new room\r\n    this.currentUser\r\n      .subscribeToRoomMultipart({\r\n        roomId: roomId,\r\n        hooks: {\r\n          onMessage: message => {\r\n            this.setState({ messages: [...this.state.messages, message] });\r\n            console.log(message);\r\n          },\r\n          // fires whenever a member of that room goes on or off line\r\n          onPresenceChanged: (state, user) => {\r\n            console.log(`User ${user} ${user.id} is ${state.current}`);\r\n          },\r\n          onUserStartedTyping: user => {\r\n            console.log(`User ${user.name} started typing`);\r\n          },\r\n          onUserStoppedTyping: user => {\r\n            console.log(`User ${user.name} stopped typing`);\r\n          }\r\n        },\r\n        messageLimit: 20\r\n      })\r\n      .then(room => {\r\n        this.setState({\r\n          currentRoomId: room.id,\r\n          roomUsers: room.users\r\n        });\r\n\r\n        this.getRooms();\r\n      })\r\n      .catch(err => console.log('error on subscribing to room: ', err));\r\n  };\r\n\r\n  getRooms = () => {\r\n    this.currentUser\r\n      .getJoinableRooms()\r\n      .then(rooms => {\r\n        this.setState({\r\n          joinableRooms: rooms,\r\n          joinedRooms: this.currentUser.rooms\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(`Error getting joinable rooms: ${err}`);\r\n      });\r\n  };\r\n\r\n  fetchRoomMessages = roomId => {\r\n    this.currentUser\r\n      .fetchMultipartMessages({\r\n        roomId,\r\n        // initialId: 42,\r\n        direction: 'older'\r\n        // limit: 10\r\n      })\r\n      .then(messages => {\r\n        this.setState({ messages });\r\n      })\r\n      .catch(err => {\r\n        console.log(`Error fetching messages: ${err}`);\r\n      });\r\n  };\r\n\r\n  creatRoom = roomName => {\r\n    this.currentUser\r\n      .createRoom({\r\n        name: roomName\r\n      })\r\n      .then(room => {\r\n        this.subscribeToRoom(room.id);\r\n        console.log(`Created room called ${room.name}`);\r\n      })\r\n      .catch(err => {\r\n        console.log(`Error creating room ${err}`);\r\n      });\r\n  };\r\n\r\n  // hook our app with chatkit API\r\n  componentDidMount() {\r\n    console.log('componentDidMount');\r\n    const chatManager = new ChatManager({\r\n      instanceLocator: chatkitInstanceLocator,\r\n      userId: 'salma',\r\n      tokenProvider: new TokenProvider({ url: tokenUrl })\r\n    });\r\n\r\n    // connect with chatkit, fetch data from it\r\n    chatManager\r\n      .connect()\r\n      .then(currentUser => {\r\n        this.currentUser = currentUser;\r\n        this.getRooms();\r\n\r\n        console.log('Successful connection', currentUser.rooms);\r\n      })\r\n      .catch(err => {\r\n        console.log('Error on connection', err);\r\n      });\r\n  }\r\n  render() {\r\n    // console.log(this.state);\r\n    return (\r\n      <div className=\"app\">\r\n        <RoomHeader\r\n          currentRoomName={this.state.currentRoomName}\r\n          currentRoomId={this.state.currentRoomId}\r\n          handleHamburgerClick={this.handleHamburgerClick}\r\n          messageFullArea={this.state.messageFullArea}\r\n        />\r\n\r\n        <MessageList\r\n          messages={this.state.messages}\r\n          startMessage={this.state.startMessage}\r\n          currentRoomId={this.state.currentRoomId}\r\n          messageFullArea={this.state.messageFullArea}\r\n        />\r\n\r\n        <RoomList\r\n          joinedRooms={this.state.joinedRooms}\r\n          joinableRooms={this.state.joinableRooms}\r\n          subscribeToRoom={this.subscribeToRoom}\r\n          currentRoomId={this.state.currentRoomId}\r\n        />\r\n\r\n        <ContactList roomUsers={this.state.roomUsers} currentUser={this.currentUser} />\r\n\r\n        <NewRoomForm creatRoom={this.creatRoom} />\r\n\r\n        <SendMessageForm\r\n          sendMessage={this.sendMessageToChatkit}\r\n          currentRoomId={!this.state.currentRoomId}\r\n          messageFullArea={this.state.messageFullArea}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","// Chatkit instance\r\n\r\nconst tokenUrl =\r\n  'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/700177bd-bd75-420e-9fe7-c47980afae0c/token';\r\nconst chatkitInstanceLocator = 'v1:us1:700177bd-bd75-420e-9fe7-c47980afae0c';\r\n\r\nexport { tokenUrl, chatkitInstanceLocator };\r\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}